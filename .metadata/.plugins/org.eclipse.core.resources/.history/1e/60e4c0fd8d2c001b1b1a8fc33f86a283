#include "stm32l476xx.h"

unsigned int keypad_value[4][4] = {{ 1, 2, 3,10},
								   { 4, 5, 6,11},
								   { 7, 8, 9,12},
								   {15, 0,14,13}};

int brightness = 5;

void GPIO_init()
{
	RCC->AHB2ENR   |= 0b00000000000000000000000000000111;

	// PA output row
	// PIN 5 = ROW 4 = PA 12
	// PIN 6 = ROW 3 = PA 11
	// PIN 7 = ROW 2 = PA 10
	// PIN 8 = ROW 1 = PA  9
	GPIOA->MODER   &= 0b11111100000000001111111111111111;
	GPIOA->MODER   |= 0b00000001010101010000000000000000;
	GPIOA->PUPDR   &= 0b11111100000000001111111111111111;
	GPIOA->PUPDR   |= 0b00000001010101010000000000000000;

	// PB input col
	// PIN 1 = COL 4 = PB 3
	// PIN 2 = COL 3 = PB 2
	// PIN 3 = COL 2 = PB 1
	// PIN 4 = COL 1 = PB 0
	GPIOB->MODER   &= 0b11111111111111111111111100000000; // use pb 3210 for Y input col
	GPIOB->PUPDR   &= 0b11111111111111111111111100000000; // clear and set input as pdown mode
	GPIOB->PUPDR   |= 0b00000000000000000000000010101010; // clear and set input as pdown mode

	// PC max7219
	GPIOC->MODER   &= 0b11111111111111111111111111000000; // clear right 6 bits
	GPIOC->MODER   |= 0b00000000000000000000000000010101; // set PC to output for max7219
}

int pressed_at(int row, int col)
{
	GPIOA->ODR &= 0;        //clear the output value
	GPIOA->ODR |= 1<<(row+9); //shift the value to send data for that row, data set

	int masked_value = GPIOB->IDR & 0xf;
	int is_pressed   = (masked_value >> col) & 1;

	return is_pressed;
}

void keypad_scan()
{
	int i, j;
	while(1)
	{
		int total = 0, pressed = 0;
		// scan with mode 0
		for(i=0; i<4; i++)
			for(j=0; j<4; j++)
				if(pressed_at(i, j) == 1)
					{ total += keypad_value[i][j]; ++pressed; }

		if(total == 14 && brightness < 10)
			++brightness;
		if(total == 15 && brightness >  0)
			--brightness;
	}
}

int main()
{
	int c;
	GPIO_init();
	c = GPIOA->ODR;
	GPIOA->ODR |= (1<<8);
	c = GPIOA->ODR;

    keypad_scan();
    return 0;
}
