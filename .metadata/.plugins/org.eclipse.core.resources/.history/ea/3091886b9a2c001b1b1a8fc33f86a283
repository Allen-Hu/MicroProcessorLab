#include "stm32l476xx.h"

unsigned int keypad_value[4][4] = {{ 1, 2, 3,10},
								   { 4, 5, 6,11},
								   { 7, 8, 9,12},
								   {15, 0,14,13}};

void GPIO_init()
{
	RCC->AHB2ENR   |= 0b00000000000000000000000000000111;

	// PA output row
	// PIN 5 = ROW 4 = PA 12
	// PIN 6 = ROW 3 = PA 11
	// PIN 7 = ROW 2 = PA 10
	// PIN 8 = ROW 1 = PA  9
	GPIOA->MODER   &= 0b11111100000000111111001111111111;
	GPIOA->MODER   |= 0b00000001010101000000010000000000;
	GPIOA->PUPDR   &= 0b11111100000000111111001111111111;
	GPIOA->PUPDR   |= 0b00000001010101000000010000000000;

	GPIOA->MODER = (GPIOA->MODER & 0xFFFFF3FF)| 0b010000000000;
	GPIOA->AFR[0] = (GPIOA->AFR[0] & 0xFF0FFFFF) | 0x100000;

	// PB input col
	// PIN 1 = COL 4 = PB 3
	// PIN 2 = COL 3 = PB 2
	// PIN 3 = COL 2 = PB 1
	// PIN 4 = COL 1 = PB 0
	GPIOB->MODER   &= 0b11111111111111111111111100000000; // use pb 3210 for Y input col
	GPIOB->PUPDR   &= 0b11111111111111111111111100000000; // clear and set input as pdown mode
	GPIOB->PUPDR   |= 0b00000000000000000000000010101010; // clear and set input as pdown mode

	// PC max7219
	GPIOC->MODER   &= 0b11111111111111111111111111000000; // clear right 6 bits
	GPIOC->MODER   |= 0b00000000000000000000000000010101; // set PC to output for max7219
}

void set_brightness(int duty_cycle)
{
	TIM2->CCR1 = duty_cycle;
}

int pressed_at(int row, int col)
{
	GPIOA->ODR &= 0b1110000111111111;        //clear the output value
	GPIOA->ODR |= 1<<(row+9); //shift the value to send data for that row, data set

	int masked_value = GPIOB->IDR & 0xf;
	int is_pressed   = (masked_value >> col) & 1;

	return is_pressed;
}

void keypad_scan()
{
	int brightness = 50;
	int i, j;
	while(1)
	{
		int total = 0, pressed = 0;
		// scan with mode 0
		for(i=0; i<4; i++)
			for(j=0; j<4; j++)
				if(pressed_at(i, j) == 1)
					{ total += keypad_value[i][j]; ++pressed; }

		if(total == 14 && brightness < 90)
		{
			brightness += 10;
			set_brightness(brightness);
			//delay();
		}
		if(total == 15 && brightness > 10)
		{
			brightness -= 10;
			set_brightness(brightness);
		}
	}
}

void Timer_init(){
    //TODO: Initialize timer
	//enable TIM2 timer clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
	//downcounter
	TIM2->CR1 |= TIM_CR1_DIR;
	//enable auto-reload preload
	TIM2->CR1 |= TIM_CR1_ARPE;
	//reload value (auto-reload presaler value)
	TIM2->ARR = (uint32_t) 100;
	// re-initialize the counter and generates an update of the registers
	TIM2->EGR = TIM_EGR_UG;

	// select compare 2 (channel 2 is configured as output)
	TIM2->CCMR1 &= 0xFFFFFCFF;
	// set output compare 2 mode to PWM mode 1
	TIM2->CCMR1 |= (TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2);
	TIM2->CCR1 = TIM2->ARR/2; //duty cycle=50%
	//TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1);
	// enable output compare 2 preload register on TIM2_CCR2
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;
	// enable compare 2 output
	TIM2->CCER |= TIM_CCER_CC1E;
}

int main()
{
	GPIO_init();
	Timer_init();
	GPIOA->ODR |= (1<<5);
    keypad_scan();
    return 0;
}
