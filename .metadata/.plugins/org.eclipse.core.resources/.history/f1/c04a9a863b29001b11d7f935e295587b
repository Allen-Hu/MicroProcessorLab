#include "stm32l476xx.h"
#define TIME_SEC 2.34

extern void max7219_init();
extern void max7219_send(unsigned char address, unsigned char data);
unsigned int millisecond;
unsigned int second;
unsigned int get_current_counter_value;
void Timer_init( TIM_TypeDef *timer)
{
    //todo: Initialize timer, dataset from the stm32l476xx.h
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; //turn on the timer2
    TIM2->CR1 &= 0x0000; //Turned on the counter as the count up mode
    TIM2->PSC = 39999U;  //prescaler, how many counter clock cycle I have to update my counter
    TIM2->ARR = 99U; //how much counter to do in one second, 0 is included so use 99 rather than 100
    //the formula is now on 4MHz = (39999+1)*(99+1) = 40000*100= 400w = 4MHz
    TIM2->EGR = 0x0001;  //re-initailzie timer to startup
    /*
    Bit 0 UG: Update generation
    This bit can be set by software, it is automatically cleared by hardware.
    0: No action
    1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
    counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
    the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
    value (TIMx_ARR) if DIR=1 (downcounting).
    */
    //counter will be incremented by one symbolize the millisecond
    //1 millisecond is 40000/4000000 = 1/100, so each 40000 clock cycle, increse the counter by one
    //the time precision should be 0.01sec, so set the arr be 99 which means a second should be divieded into 100 parts
}

void Timer_start(TIM_TypeDef *timer)
{
    //todo: start timer and show the time on the 7-SEG LED.
    //enable the counter
    TIM2->CR1 |= TIM_CR1_CEN; //Turn on the counter mode, change in the control register
    TIM2->SR &= ~(TIM_SR_UIF); //off the user interrupt mode, so the cpu can keep working on the clock increment
}

void GPIO_init()
{
	RCC->AHB2ENR   |= 0b00000000000000000000000000000100;

	// PC max7219
	GPIOC->MODER   &= 0b11111111111111111111111111000000; // clear right 6 bits
	GPIOC->MODER   |= 0b00000000000000000000000000010101; // set PC to output for max7219
}

int main()
{
 	GPIO_init();
	max7219_init();
	Timer_init(TIM2);
	Timer_start(TIM2);
    display_clr();
    millisecond = 0;
    get_current_counter_value = 0;
    int TARGET_SEC = TIME_SEC / 1;
    int TARGET_MSEC = TIME_SEC * 100 - ( TARGET_SEC * 100 );
	while(1)
	{
		//todo: Polling the timer count and do lab requirements
        if(TIME_SEC < 0.01 || TIME_SEC > 10000.0)
        {
            timer_display(0,3); //3 bit float number, 0.00
        }
        get_current_counter_value = TIM2->CNT; //get the current counter value since it symbolizes the millisecond
        millisecond = get_current_counter_value;
        if( second == TARGET_SEC && TIM2->CNT == TARGET_MSEC)
        {
            timer_display(87,87);
            while(1); //halt here
        }
        get_current_counter_value = TIM2->CNT; //get the current counter value since it symbolizes the millisecond
        millisecond = get_current_counter_value;
        timer_display(6,8);
        if(TIM2->SR & 0x0001) //one second is reached
        {
            second+=1;
            TIM2->SR &= ~(TIM_SR_UIF); //reset again for next counter event
        }
        get_current_counter_value = TIM2->CNT; //get the current counter value since it symbolizes the millisecond
        millisecond = get_current_counter_value;
        timer_display(6,8);
	}
    return 0;
}
